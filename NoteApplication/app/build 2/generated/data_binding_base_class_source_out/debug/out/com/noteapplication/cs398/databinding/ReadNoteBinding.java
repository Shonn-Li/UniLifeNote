// Generated by view binder compiler. Do not edit!
package com.noteapplication.cs398.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SwitchCompat;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.noteapplication.cs398.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ReadNoteBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button backButton;

  @NonNull
  public final Button editButton;

  @NonNull
  public final SwitchCompat idRmdSwitch;

  @NonNull
  public final LinearLayout linearLayoutButton;

  @NonNull
  public final TextView noteContent;

  @NonNull
  public final TextView noteTitle;

  private ReadNoteBinding(@NonNull RelativeLayout rootView, @NonNull Button backButton,
      @NonNull Button editButton, @NonNull SwitchCompat idRmdSwitch,
      @NonNull LinearLayout linearLayoutButton, @NonNull TextView noteContent,
      @NonNull TextView noteTitle) {
    this.rootView = rootView;
    this.backButton = backButton;
    this.editButton = editButton;
    this.idRmdSwitch = idRmdSwitch;
    this.linearLayoutButton = linearLayoutButton;
    this.noteContent = noteContent;
    this.noteTitle = noteTitle;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ReadNoteBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ReadNoteBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.read_note, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ReadNoteBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.back_button;
      Button backButton = ViewBindings.findChildViewById(rootView, id);
      if (backButton == null) {
        break missingId;
      }

      id = R.id.edit_button;
      Button editButton = ViewBindings.findChildViewById(rootView, id);
      if (editButton == null) {
        break missingId;
      }

      id = R.id.id_rmd_switch;
      SwitchCompat idRmdSwitch = ViewBindings.findChildViewById(rootView, id);
      if (idRmdSwitch == null) {
        break missingId;
      }

      id = R.id.linear_layout_button;
      LinearLayout linearLayoutButton = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutButton == null) {
        break missingId;
      }

      id = R.id.note_content;
      TextView noteContent = ViewBindings.findChildViewById(rootView, id);
      if (noteContent == null) {
        break missingId;
      }

      id = R.id.note_title;
      TextView noteTitle = ViewBindings.findChildViewById(rootView, id);
      if (noteTitle == null) {
        break missingId;
      }

      return new ReadNoteBinding((RelativeLayout) rootView, backButton, editButton, idRmdSwitch,
          linearLayoutButton, noteContent, noteTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
